<cfcomponent hint="Auto Update ColdBox System" output="false"><!------------------------------------------- CONSTRUCTOR ------------------------------------------->	<cfscript>	variables.path = getDirectoryFromPath(getMetadata(this).path);	variables.slash = createObject("java","java.lang.System").getProperty("file.separator");	variables.coldbox_xmlFile = variables.path & variables.slash & "coldbox.xml";	variables.dashboard_xmlFile = variables.path & variables.slash & "dashboard.xml";	variables.distributionSite = "http://www.coldboxframework.com/builds/";	//variables.distributionSite = "http://localhost/applications/coldbox/builds/";	//Distro Setup	variables.coldboxdistro = structnew();	variables.dashboarddistro = structnew();	variables.Distribution = structnew();	variables.Distribution.Version = "";	variables.Distribution.FileName = "";	variables.Distribution.UpdateFile = "";	variables.Distribution.ReadmeFile = "";	variables.Distribution.FileSize = "";	variables.Distribution.FileDate = "";	</cfscript><!------------------------------------------- PUBLIC ------------------------------------------->	<cffunction name="GetUpdateInfo" access="remote" returntype="struct" hint="Retrieve the current coldbox system information." output="false">		<!--- ************************************************************* --->		<cfargument name="coldboxVersion" 	required="yes" type="string" hint="The coldbox framework version to check for update.">		<cfargument name="dashboardVersion" required="yes" type="string" hint="The dashboard version to check for update.">		<!--- ************************************************************* --->		<cfscript>			var rtnStruct = structnew();						/* ColdBox Framework Version */			var coldboxMajorRelease = 0;			var coldboxMinorRelease = 0;			var coldboxRevision = 0;						/* Dashboard Version */			var dashboardMajorRelease = 0;			var dashboardMinorRelease = 0;			var dashboardRevision = 0;						//Incoming versions			var in_coldboxMajorRelease = 0;			var in_coldboxMinorRelease = 0;			var in_coldboxRevision = 0;			var in_dashboardMajorRelease = 0;			var in_dashboardMinorRelease = 0;			var in_dashboardRevision = 0;				//Return Struct			rtnStruct.error = 1;			rtnStruct.errorMessage = "";			rtnStruct.coldboxAvailableUpdate = false;			rtnStruct.dashboardAvailableUpdate = false;			rtnStruct.coldboxDistro = Structnew();			rtnStruct.dashboardDistro = Structnew();				try{				//Parse xml objects				parseDistributionObjects();								//Set Local versions For Coldbox				coldboxMajorRelease = getToken(variables.coldboxdistro.version, 1, ".");				coldboxMinorRelease = getToken(variables.coldboxdistro.version, 2, ".");				coldboxRevision = getToken(variables.coldboxdistro.version, 3, ".");								//Set Local versions for Dashboard				dashboardMajorRelease = getToken(variables.dashboarddistro.version, 1, ".");				dashboardMinorRelease = getToken(variables.dashboarddistro.version, 2, ".");				dashboardRevision = getToken(variables.dashboarddistro.version, 3, ".");								//Check for incoming versions				if ( listlen(arguments.coldboxVersion, ".") neq 3 ){					rtnStruct.errorMessage = "The coldbox version you sent: #arguments.coldboxVersion# is not a valid version.";				}				else if ( listlen(arguments.dashboardVersion, ".") neq 3 ){					rtnStruct.errorMessage = "The dashboard version you sent: #arguments.dashboardVersion# is not a valid version.";				}				else{						//start parsing version numbers					in_coldboxMajorRelease = getToken(arguments.coldboxVersion,1,".");					in_coldboxMinorRelease = getToken(arguments.coldboxVersion,2,".");					in_coldboxRevision = getToken(arguments.coldboxVersion,3,".");					in_dashboardMajorRelease = getToken(arguments.dashboardVersion,1,".");					in_dashboardMinorRelease = getToken(arguments.dashboardVersion,2,".");					in_dashboardRevision = getToken(arguments.dashboardVersion,3,".");						//Start testing coldbox version					if ( coldboxMajorRelease gt in_coldboxMajorRelease )						rtnStruct.coldboxAvailableUpdate = true;					else if( coldboxMajorRelease lt in_coldboxMajorRelease )						rtnStruct.coldboxAvailableUpdate = false;					/* Start Checking the minor versions now. */					else if ( coldboxMinorRelease gt in_coldboxMinorRelease )						rtnStruct.coldboxAvailableUpdate = true;					else if( coldboxMinorRelease lt in_coldboxMinorRelease )						rtnStruct.coldboxAvailableUpdate = false;					/* Revision Checks */ 					else if ( coldboxRevision gt in_coldboxRevision )						rtnStruct.coldboxAvailableUpdate = true;					else if ( coldboxRevision lte in_coldboxRevision )						rtnStruct.coldboxAvailableUpdate = false;																//Start testing for Dashboard version					if ( dashboardMajorRelease gt in_dashboardMajorRelease )						rtnStruct.dashboardAvailableUpdate = true;					else if( dashboardMajorRelease lt in_dashboardMajorRelease )						rtnStruct.dashboardAvailableUpdate = false;					/* Start Checking the minor versions now. */					else if ( dashboardMinorRelease gt in_dashboardMinorRelease )						rtnStruct.dashboardAvailableUpdate = true;					else if( dashboardMinorRelease lt in_dashboardMinorRelease )						rtnStruct.dashboardAvailableUpdate = false;					/* Revision Checks */ 					else if ( dashboardRevision gt in_dashboardRevision )						rtnStruct.dashboardAvailableUpdate = true;					else if ( dashboardRevision lte in_dashboardRevision )						rtnStruct.dashboardAvailableUpdate = false;						//Setup Distro Structures					rtnStruct.coldboxDistro = variables.coldboxDistro;					rtnStruct.dashboardDistro = variables.dashboardDistro;										//Return Errors					rtnStruct.error = 0;				}			}			catch(Any e){				rtnStruct.errorMessage = "Error getting update information.<br>Diagnostics: #e.detail# <br> #e.Message#";			}			/* Return structure */			return rtnStruct;		</cfscript>	</cffunction>		<cffunction name="getCurrentColdboxVersion" access="public" returntype="string" hint="Get's you the current coldbox version" output="false" >		<cfscript>			//Parse xml objects			parseDistributionObjects();						return variables.coldboxdistro.version;				</cfscript>
	</cffunction>		<cffunction name="getCurrentDashboardVersion" access="public" returntype="string" hint="Get's you the current dashboard version" output="false" >		<cfscript>			//Parse xml objects			parseDistributionObjects();						return variables.dashboardDistro.version;				</cfscript>	</cffunction><!------------------------------------------- PRIVATE ------------------------------------------->	<cffunction name="parseDistributionObjects" access="private" returntype="void" output="false">		<cfscript>			var coldbox_xmlOBJ = XMLParse(variables.coldbox_xmlFile);			var dashboard_xmlOBJ = XMLParse(variables.dashboard_xmlFile);						//get objects For framework			variables.coldboxdistro.version = coldbox_xmlOBJ.xmlRoot.Version.xmlText;			variables.coldboxdistro.FilePath = ExpandPath(coldbox_xmlOBJ.xmlRoot.Filename.xmlText);			variables.coldboxdistro.FileName = GetFileFromPath(variables.coldboxdistro.FilePath);			variables.coldboxdistro.FileDate = getFileLastModified(variables.coldboxdistro.FilePath);			variables.coldboxdistro.FileSize = getFileSize(variables.coldboxdistro.FilePath);			variables.coldboxdistro.UpdateDate = coldbox_xmlOBJ.xmlRoot.UpdateDate.xmlText;			variables.coldboxdistro.Author = coldbox_xmlOBJ.xmlRoot.Author.xmlText;			variables.coldboxdistro.Description = coldbox_xmlOBJ.xmlRoot.Description.xmlText;			variables.coldboxdistro.UpdateURL = variables.distributionSite & variables.coldboxdistro.FileName;						//get objects for dashbaord			variables.dashboarddistro.version = dashboard_xmlOBJ.xmlRoot.Version.xmlText;			variables.dashboarddistro.FilePath = ExpandPath(dashboard_xmlOBJ.xmlRoot.Filename.xmlText);			variables.dashboarddistro.FileName = GetFileFromPath(variables.dashboarddistro.FilePath);			variables.dashboarddistro.FileDate = getFileLastModified(variables.dashboarddistro.FilePath);			variables.dashboarddistro.FileSize = getFileSize(variables.dashboarddistro.FilePath);			variables.dashboarddistro.UpdateDate = dashboard_xmlOBJ.xmlRoot.UpdateDate.xmlText;			variables.dashboarddistro.Author = dashboard_xmlOBJ.xmlRoot.Author.xmlText;			variables.dashboarddistro.Description = dashboard_xmlOBJ.xmlRoot.Description.xmlText;			variables.dashboarddistro.UpdateURL = variables.distributionSite & variables.dashboarddistro.FileName;		</cfscript>	</cffunction>	<cffunction name="getFileSize" access="private" returntype="string" output="false">		<!--- ************************************************************* --->		<cfargument name="filename"   type="string" required="yes">		<cfargument name="sizeFormat" type="string" required="no" default="bytes" hint="Available formats: [bytes][kbytes][mbytes][gbytes]">		<!--- ************************************************************* --->		<cfscript>		var objFile =  createObject("java","java.io.File");		objFile.init(JavaCast("string", filename));		if ( arguments.sizeFormat eq "bytes" )			return objFile.length();		if ( arguments.sizeFormat eq "kbytes" )			return (objFile.length()/1024);		if ( arguments.sizeFormat eq "mbytes" )			return (objFile.length()/(1048576));		if ( arguments.sizeFormat eq "gbytes" )			return (objFile.length()/1073741824);		</cfscript>	</cffunction>	<cffunction name="getFileLastModified" access="private" returntype="string" output="false">		<!--- ************************************************************* --->		<cfargument name="filename" type="string" required="yes">		<!--- ************************************************************* --->		<cfscript>		var objFile =  createObject("java","java.io.File");		// Calculate adjustments fot timezone and daylightsavindtime		var Offset = ((GetTimeZoneInfo().utcHourOffset)+1)*-3600;		objFile.init(JavaCast("string", filename));		// Date is returned as number of seconds since 1-1-1970		return DateAdd('s', (Round(objFile.lastModified()/1000))+Offset, CreateDateTime(1970, 1, 1, 0, 0, 0));		</cfscript>	</cffunction></cfcomponent>